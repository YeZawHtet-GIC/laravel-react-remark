management 
-curriculum create
-assignment
-checking Is pratice or not

student
-

languages
-pure php (7.2)
-c++
-mysql 5.7 (to update v-8)
- linux
-nginx
-smarty
-docker


cleaning 
prefetch

*******************
Docker Remark
*******************
Adding docker to project 
*************
- docker init  ( this command will create Docker assets )
================
-container => Containers have everything that your code needs in order to run, down to a base operating system
=> isolated enviroment for your code.
=> always need an image to run a container

- docker build -t welcome-to-docker . 		( creating image )
-  docker compose up  	(running multi-container docker)
- docker compose up -d  	(-d flag tells Docker Compose to run in detached mode.)
- docker compose watch 	( for sure to automatically update and preview our code )
=================
-adding volume to persist data after deleting containers

  todo-database:
 
    volumes: 
     - database:/data/db

volumes:
  database:
===============================
Accessing a local folder in docker container
*************
- can use bind mounts to access local folder
-Add a bind mount to access data on your system from a container. A bind mount lets you share a directory from your host's filesystem into the container.
volumes: 
     - ./app:/usr/src/app
     - /usr/src/app/node_modules
======================
Docker Commands
*************************
- docker file create with instructions => 	docker init
- docker file munual create => 	touch dockerfile
- Image Create => 		docker build -t ImageName .
- Running Container => 	docker run -dp 127.0.0.1:3000:3000 getting-started
- View running Container List => 	docker ps
- View all container list => 		docker ps --all
- Stop the running Container => 	docker stop <container_id)
- Removing container => 		docker rm <container_id)
- Single command for stop and remove container => 		docker rm -f <container_id>
- Push the Image => 		docker push docker/getting-started
- tag Image for pushing to docker hub => 	docker tag getting-started username/getting-started
- Checking Image List => 		docker image ls
- Login to Docker Hub => 		docker login -u User_Name
- Volume Create => 		docker volume create todo-db
- Attaching or mounting volume db => 		docker run -dp 127.0.0.1:3000:3000 --mount type=volume,src=todo-db,target=/etc/todos getting-started
* Named volume: type=volume,src=my-volume,target=/usr/local/data
* Bind mount: type=bind,src=/path/to/data,target=/usr/local/data
- Create Network =>  		docker network create todo-app
- start MySQL container and attached to network  =>		docker run -d \
  							  --network todo-app --network-alias mysql \
   							 -v todo-mysql-data:/var/lib/mysql \
   							 -e MYSQL_ROOT_PASSWORD=secret \
  							  -e MYSQL_DATABASE=todos \
 							   mysql:8.0 
- confirming database up and running => 		docker exec -it <mysql-container-id> mysql -u root -p

================
Defining App Service
-docker run -dp 127.0.0.1:3000:3000 \
  -w /app -v "$(pwd):/app" \
  --network todo-app \
  -e MYSQL_HOST=mysql \
  -e MYSQL_USER=root \
  -e MYSQL_PASSWORD=secret \
  -e MYSQL_DB=todos \
  node:18-alpine \
  sh -c "yarn install && yarn run dev"
=====
Defining MySQL service   
-  docker run -d \
  --network todo-app --network-alias mysql \
  -v todo-mysql-data:/var/lib/mysql \
  -e MYSQL_ROOT_PASSWORD=secret \
  -e MYSQL_DATABASE=todos \
  mysql:8.0




